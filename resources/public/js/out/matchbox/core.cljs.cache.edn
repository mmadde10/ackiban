;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{take-last take conj! key dissoc! reset! swap! set! parents deref get-in}, :name matchbox.core, :imports nil, :requires {str clojure.string, clojure.string clojure.string, walk clojure.walk, clojure.walk clojure.walk, utils matchbox.utils, matchbox.utils matchbox.utils, matchbox.registry matchbox.registry, cljsjs.firebase cljsjs.firebase}, :uses {register-listener matchbox.registry}, :defs {deref-list {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 198, :column 7, :end-line 198, :end-column 17, :arglists (quote ([ref cb]))}, :name matchbox.core/deref-list, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 17, :method-params ([ref cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ref cb]))}, wrap-snapshot {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 154, :column 8, :end-line 154, :end-column 21, :private true, :arglists (quote ([snapshot]))}, :private true, :name matchbox.core/wrap-snapshot, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 21, :method-params ([snapshot]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 1, :fn-var true, :arglists (quote ([snapshot]))}, auth-anon {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 467, :column 7, :end-line 467, :end-column 16, :arglists (quote ([ref & [cb session-only?]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ref [cb session-only?])], :arglists ([ref & [cb session-only?]]), :arglists-meta (nil)}}, :name matchbox.core/auth-anon, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ref [cb session-only?])], :arglists ([ref & [cb session-only?]]), :arglists-meta (nil)}, :method-params [(ref [cb session-only?])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 467, :end-line 467, :max-fixed-arity 1, :fn-var true, :arglists ([ref & [cb session-only?]])}, take-last {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 385, :column 7, :end-line 385, :end-column 16, :arglists (quote ([ref limit])), :doc "Limit scope to the last `limit` items"}, :name matchbox.core/take-last, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 16, :method-params ([ref limit]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 385, :end-line 385, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ref limit])), :doc "Limit scope to the last `limit` items"}, auth-info {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 486, :column 7, :end-line 486, :end-column 16, :arglists (quote ([ref])), :doc "Returns a map of uid, provider, token, expires - or nil if there is no session"}, :name matchbox.core/auth-info, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 16, :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 486, :end-line 486, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref])), :doc "Returns a map of uid, provider, token, expires - or nil if there is no session"}, remove! {:name matchbox.core/remove!, :file "resources/public/js/out/matchbox/core.cljs", :line 279, :column 1, :end-line 279, :end-column 13, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 279, :column 6, :end-line 279, :end-column 13}}, dissoc-in! {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 519, :column 7, :end-line 519, :end-column 17, :arglists (quote ([ref korks & [cb]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref korks [cb])], :arglists ([ref korks & [cb]]), :arglists-meta (nil)}}, :name matchbox.core/dissoc-in!, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref korks [cb])], :arglists ([ref korks & [cb]]), :arglists-meta (nil)}, :method-params [(ref korks [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 519, :end-line 519, :max-fixed-arity 2, :fn-var true, :arglists ([ref korks & [cb]])}, take {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 380, :column 7, :end-line 380, :end-column 11, :arglists (quote ([ref limit])), :doc "Limit scope to the first `limit` items"}, :name matchbox.core/take, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 11, :method-params ([ref limit]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 380, :end-line 380, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ref limit])), :doc "Limit scope to the first `limit` items"}, listen-children {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 576, :column 7, :end-line 576, :end-column 22, :arglists (quote ([ref cb] [ref korks cb])), :doc "Subscribe to all children notifications on a reference.\n   Callback receives [:event-type [<key> <value>]] as only argument\n   Returns an unsubscribe function", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ref cb] [ref korks cb]), :arglists ([ref cb] [ref korks cb]), :arglists-meta (nil nil)}}, :name matchbox.core/listen-children, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ref cb] [ref korks cb]), :arglists ([ref cb] [ref korks cb]), :arglists-meta (nil nil)}, :method-params ([ref cb] [ref korks cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 576, :end-line 576, :max-fixed-arity 3, :fn-var true, :arglists ([ref cb] [ref korks cb]), :doc "Subscribe to all children notifications on a reference.\n   Callback receives [:event-type [<key> <value>]] as only argument\n   Returns an unsubscribe function"}, merge! {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 226, :column 7, :end-line 226, :end-column 13, :arglists (quote ([ref val & [cb]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref val [cb])], :arglists ([ref val & [cb]]), :arglists-meta (nil)}}, :name matchbox.core/merge!, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref val [cb])], :arglists ([ref val & [cb]]), :arglists-meta (nil)}, :method-params [(ref val [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 2, :fn-var true, :arglists ([ref val & [cb]])}, merge-in! {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 510, :column 7, :end-line 510, :end-column 16, :arglists (quote ([ref korks val & [cb]])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref korks val [cb])], :arglists ([ref korks val & [cb]]), :arglists-meta (nil)}}, :name matchbox.core/merge-in!, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref korks val [cb])], :arglists ([ref korks val & [cb]]), :arglists-meta (nil)}, :method-params [(ref korks val [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 510, :end-line 510, :max-fixed-arity 3, :fn-var true, :arglists ([ref korks val & [cb]])}, --listen-to {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 530, :column 7, :end-line 530, :end-column 18, :arglists (quote ([ref type cb render-fn]))}, :name matchbox.core/--listen-to, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 18, :method-params ([ref type cb render-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 530, :end-line 530, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ref type cb render-fn]))}, reconnect! {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 398, :column 7, :end-line 398, :end-column 17, :arglists (quote ([]))}, :name matchbox.core/reconnect!, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 398, :end-line 398, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, reset-with-priority! {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 214, :column 7, :end-line 214, :end-column 27, :arglists (quote ([ref val priority & [cb]])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref val priority [cb])], :arglists ([ref val priority & [cb]]), :arglists-meta (nil)}}, :name matchbox.core/reset-with-priority!, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref val priority [cb])], :arglists ([ref val priority & [cb]]), :arglists-meta (nil)}, :method-params [(ref val priority [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 214, :end-line 214, :max-fixed-arity 3, :fn-var true, :arglists ([ref val priority & [cb]])}, order-by-priority {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 330, :column 7, :end-line 330, :end-column 24, :arglists (quote ([ref]))}, :name matchbox.core/order-by-priority, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 24, :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 330, :end-line 330, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref]))}, hydrate-keywords {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 117, :column 8, :end-line 117, :end-column 24, :private true, :arglists (quote ([x]))}, :private true, :name matchbox.core/hydrate-keywords, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 24, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, SERVER_TIMESTAMP {:name matchbox.core/SERVER_TIMESTAMP, :file "resources/public/js/out/matchbox/core.cljs", :line 57, :column 1, :end-line 57, :end-column 22, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 57, :column 6, :end-line 57, :end-column 22}}, swap-in! {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 516, :column 7, :end-line 516, :end-column 15, :arglists (quote ([ref korks f & args])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref korks f args)], :arglists ([ref korks f & args]), :arglists-meta (nil)}}, :name matchbox.core/swap-in!, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref korks f args)], :arglists ([ref korks f & args]), :arglists-meta (nil)}, :method-params [(ref korks f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 516, :end-line 516, :max-fixed-arity 3, :fn-var true, :arglists ([ref korks f & args])}, create-user {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 452, :column 7, :end-line 452, :end-column 18, :arglists (quote ([ref email password & [cb]])), :doc "create-user creates a user in the Firebase built-in authentication server", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref email password [cb])], :arglists ([ref email password & [cb]]), :arglists-meta (nil)}}, :name matchbox.core/create-user, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref email password [cb])], :arglists ([ref email password & [cb]]), :arglists-meta (nil)}, :method-params [(ref email password [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 452, :end-line 452, :max-fixed-arity 3, :fn-var true, :arglists ([ref email password & [cb]]), :doc "create-user creates a user in the Firebase built-in authentication server"}, deref-in {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 498, :column 7, :end-line 498, :end-column 15, :arglists (quote ([ref korks cb]))}, :name matchbox.core/deref-in, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 15, :method-params ([ref korks cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 498, :end-line 498, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ref korks cb]))}, conj! {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 239, :column 7, :end-line 239, :end-column 12, :arglists (quote ([ref val & [cb]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref val [cb])], :arglists ([ref val & [cb]]), :arglists-meta (nil)}}, :name matchbox.core/conj!, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref val [cb])], :arglists ([ref val & [cb]]), :arglists-meta (nil)}, :method-params [(ref val [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 239, :end-line 239, :max-fixed-arity 2, :fn-var true, :arglists ([ref val & [cb]])}, serialize {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 135, :column 7, :end-line 135, :end-column 16, :arglists (quote ([v]))}, :name matchbox.core/serialize, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 16, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, listen-to {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 564, :column 7, :end-line 564, :end-column 16, :arglists (quote ([ref type cb] [ref korks type cb])), :doc "Subscribe to notifications of given type\n   Callback receives [<key> <value>] as only argument\n   Returns an unsubscribe function", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([ref type cb] [ref korks type cb]), :arglists ([ref type cb] [ref korks type cb]), :arglists-meta (nil nil)}}, :name matchbox.core/listen-to, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([ref type cb] [ref korks type cb]), :arglists ([ref type cb] [ref korks type cb]), :arglists-meta (nil nil)}, :method-params ([ref type cb] [ref korks type cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 564, :end-line 564, :max-fixed-arity 4, :fn-var true, :arglists ([ref type cb] [ref korks type cb]), :doc "Subscribe to notifications of given type\n   Callback receives [<key> <value>] as only argument\n   Returns an unsubscribe function"}, ensure-kw-map {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 424, :column 8, :end-line 424, :end-column 21, :private true, :arglists (quote ([data])), :doc "Coerce java.util.HashMap and friends to keywordized maps"}, :private true, :name matchbox.core/ensure-kw-map, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 21, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 424, :end-line 424, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :doc "Coerce java.util.HashMap and friends to keywordized maps"}, keywords->strings {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 114, :column 8, :end-line 114, :end-column 25, :private true, :arglists (quote ([x]))}, :private true, :name matchbox.core/keywords->strings, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 25, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, deref-list-in {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 501, :column 7, :end-line 501, :end-column 20, :arglists (quote ([ref korks cb]))}, :name matchbox.core/deref-list-in, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 20, :method-params ([ref korks cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 501, :end-line 501, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ref korks cb]))}, reset-with-priority-in! {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 507, :column 7, :end-line 507, :end-column 30, :arglists (quote ([ref korks val priority & [cb]])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(ref korks val priority [cb])], :arglists ([ref korks val priority & [cb]]), :arglists-meta (nil)}}, :name matchbox.core/reset-with-priority-in!, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 30, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(ref korks val priority [cb])], :arglists ([ref korks val priority & [cb]]), :arglists-meta (nil)}, :method-params [(ref korks val priority [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 507, :end-line 507, :max-fixed-arity 4, :fn-var true, :arglists ([ref korks val priority & [cb]])}, order-by-value {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 336, :column 7, :end-line 336, :end-column 21, :arglists (quote ([ref]))}, :name matchbox.core/order-by-value, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 21, :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 336, :end-line 336, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref]))}, key {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 141, :column 7, :end-line 141, :end-column 10, :arglists (quote ([ref])), :doc "Last segment in reference or snapshot path"}, :name matchbox.core/key, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 10, :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref])), :doc "Last segment in reference or snapshot path"}, parent {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 173, :column 7, :end-line 173, :end-column 13, :arglists (quote ([ref])), :doc "Immediate ancestor of reference, if any"}, :name matchbox.core/parent, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 13, :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref])), :doc "Immediate ancestor of reference, if any"}, order-by-child {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 339, :column 7, :end-line 339, :end-column 21, :arglists (quote ([ref key]))}, :name matchbox.core/order-by-child, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 21, :method-params ([ref key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 339, :end-line 339, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ref key]))}, connected? {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 402, :column 7, :end-line 402, :end-column 17, :arglists (quote ([])), :doc "Returns boolean around whether client is set to synchronise with server.\n   Says nothing about actual connectivity."}, :name matchbox.core/connected?, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 402, :end-line 402, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns boolean around whether client is set to synchronise with server.\n   Says nothing about actual connectivity."}, reset-in! {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 504, :column 7, :end-line 504, :end-column 16, :arglists (quote ([ref korks val & [cb]])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref korks val [cb])], :arglists ([ref korks val & [cb]]), :arglists-meta (nil)}}, :name matchbox.core/reset-in!, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref korks val [cb])], :arglists ([ref korks val & [cb]]), :arglists-meta (nil)}, :method-params [(ref korks val [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 504, :end-line 504, :max-fixed-arity 3, :fn-var true, :arglists ([ref korks val & [cb]])}, build-opts {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 419, :column 7, :end-line 419, :end-column 17, :arglists (quote ([session-only?]))}, :name matchbox.core/build-opts, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 17, :method-params ([session-only?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 419, :end-line 419, :max-fixed-arity 1, :fn-var true, :arglists (quote ([session-only?]))}, start-at {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 344, :column 7, :end-line 344, :end-column 15, :arglists (quote ([ref value & [key]])), :doc "Limit query to start at `value` (inclusive). By default `value` is compared against\n   priorities, but reacts to the `order-by-*` scope. This also affects what types\n   `value can take on.\n\n   `key` is the child key to start at, and is supported only when ordering by priority.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref value [key])], :arglists ([ref value & [key]]), :arglists-meta (nil)}}, :name matchbox.core/start-at, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref value [key])], :arglists ([ref value & [key]]), :arglists-meta (nil)}, :method-params [(ref value [key])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 344, :end-line 344, :max-fixed-arity 2, :fn-var true, :arglists ([ref value & [key]]), :doc "Limit query to start at `value` (inclusive). By default `value` is compared against\n   priorities, but reacts to the `order-by-*` scope. This also affects what types\n   `value can take on.\n\n   `key` is the child key to start at, and is supported only when ordering by priority."}, listen-list {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 571, :column 7, :end-line 571, :end-column 18, :arglists (quote ([ref cb] [ref korks cb])), :doc "Subscribe to updates containing full vector or children", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ref cb] [ref korks cb]), :arglists ([ref cb] [ref korks cb]), :arglists-meta (nil nil)}}, :name matchbox.core/listen-list, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ref cb] [ref korks cb]), :arglists ([ref cb] [ref korks cb]), :arglists-meta (nil nil)}, :method-params ([ref cb] [ref korks cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 571, :end-line 571, :max-fixed-arity 3, :fn-var true, :arglists ([ref cb] [ref korks cb]), :doc "Subscribe to updates containing full vector or children"}, dissoc! {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 271, :column 7, :end-line 271, :end-column 14, :arglists (quote ([ref & [cb]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ref [cb])], :arglists ([ref & [cb]]), :arglists-meta (nil)}}, :name matchbox.core/dissoc!, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ref [cb])], :arglists ([ref & [cb]]), :arglists-meta (nil)}, :method-params [(ref [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 271, :end-line 271, :max-fixed-arity 1, :fn-var true, :arglists ([ref & [cb]])}, connect {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 165, :column 7, :end-line 165, :end-column 14, :arglists (quote ([url] [url korks])), :doc "Create a reference for firebase", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([url] [url korks]), :arglists ([url] [url korks]), :arglists-meta (nil nil)}}, :name matchbox.core/connect, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([url] [url korks]), :arglists ([url] [url korks]), :arglists-meta (nil nil)}, :method-params ([url] [url korks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 2, :fn-var true, :arglists ([url] [url korks]), :doc "Create a reference for firebase"}, value {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 147, :column 7, :end-line 147, :end-column 12, :arglists (quote ([snapshot])), :doc "Data stored within snapshot"}, :name matchbox.core/value, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 12, :method-params ([snapshot]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 1, :fn-var true, :arglists (quote ([snapshot])), :doc "Data stored within snapshot"}, reset! {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 202, :column 7, :end-line 202, :end-column 13, :arglists (quote ([ref val & [cb]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref val [cb])], :arglists ([ref val & [cb]]), :arglists-meta (nil)}}, :name matchbox.core/reset!, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref val [cb])], :arglists ([ref val & [cb]]), :arglists-meta (nil)}, :method-params [(ref val [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 202, :end-line 202, :max-fixed-arity 2, :fn-var true, :arglists ([ref val & [cb]])}, -listen-to {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 547, :column 8, :end-line 547, :end-column 18, :private true, :arglists (quote ([ref type cb & [render-fn]])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref type cb [render-fn])], :arglists ([ref type cb & [render-fn]]), :arglists-meta (nil)}}, :private true, :name matchbox.core/-listen-to, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref type cb [render-fn])], :arglists ([ref type cb & [render-fn]]), :arglists-meta (nil)}, :method-params [(ref type cb [render-fn])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 547, :end-line 547, :max-fixed-arity 3, :fn-var true, :arglists ([ref type cb & [render-fn]])}, on-disconnect {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 408, :column 7, :end-line 408, :end-column 20, :arglists (quote ([ref])), :doc "Return an on"}, :name matchbox.core/on-disconnect, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 20, :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 408, :end-line 408, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref])), :doc "Return an on"}, unauth {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 493, :column 7, :end-line 493, :end-column 13, :arglists (quote ([ref]))}, :name matchbox.core/unauth, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 13, :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 493, :end-line 493, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref]))}, -priority {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 309, :column 8, :end-line 309, :end-column 17, :private true, :arglists (quote ([ds]))}, :private true, :name matchbox.core/-priority, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 17, :method-params ([ds]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 309, :end-line 309, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ds]))}, all-events {:name matchbox.core/all-events, :file "resources/public/js/out/matchbox/core.cljs", :line 49, :column 1, :end-line 49, :end-column 16, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 49, :column 6, :end-line 49, :end-column 16}}, connected {:name matchbox.core/connected, :file "resources/public/js/out/matchbox/core.cljs", :line 392, :column 1, :end-line 392, :end-column 19, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 392, :column 10, :end-line 392, :end-column 19}}, equal-to {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 368, :column 7, :end-line 368, :end-column 15, :arglists (quote ([ref value & [key]])), :doc "Limit query to `value` (inclusive). By default `value` is compared against\n   priorities, but reacts to the `order-by-*` scope. This also affects what types\n   `value can take on.\n\n  `key` is the child key to compare on, and is supported only when ordering by priority.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref value [key])], :arglists ([ref value & [key]]), :arglists-meta (nil)}}, :name matchbox.core/equal-to, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref value [key])], :arglists ([ref value & [key]]), :arglists-meta (nil)}, :method-params [(ref value [key])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 368, :end-line 368, :max-fixed-arity 2, :fn-var true, :arglists ([ref value & [key]]), :doc "Limit query to `value` (inclusive). By default `value` is compared against\n   priorities, but reacts to the `order-by-*` scope. This also affects what types\n   `value can take on.\n\n  `key` is the child key to compare on, and is supported only when ordering by priority."}, with-ds {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 294, :column 8, :end-line 294, :end-column 15, :private true, :arglists (quote ([ref-or-ds f & [cb]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref-or-ds f [cb])], :arglists ([ref-or-ds f & [cb]]), :arglists-meta (nil)}}, :private true, :name matchbox.core/with-ds, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref-or-ds f [cb])], :arglists ([ref-or-ds f & [cb]]), :arglists-meta (nil)}, :method-params [(ref-or-ds f [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 294, :end-line 294, :max-fixed-arity 2, :fn-var true, :arglists ([ref-or-ds f & [cb]])}, swap! {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 256, :column 7, :end-line 256, :end-column 12, :arglists (quote ([ref f & args])), :doc "Update value atomically, with local optimistic writes", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref f args)], :arglists ([ref f & args]), :arglists-meta (nil)}}, :name matchbox.core/swap!, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref f args)], :arglists ([ref f & args]), :arglists-meta (nil)}, :method-params [(ref f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 2, :fn-var true, :arglists ([ref f & args]), :doc "Update value atomically, with local optimistic writes"}, order-by-key {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 333, :column 7, :end-line 333, :end-column 19, :arglists (quote ([ref]))}, :name matchbox.core/order-by-key, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 19, :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 333, :end-line 333, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref]))}, auth {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 460, :column 7, :end-line 460, :end-column 11, :arglists (quote ([ref email password & [cb session-only?]])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref email password [cb session-only?])], :arglists ([ref email password & [cb session-only?]]), :arglists-meta (nil)}}, :name matchbox.core/auth, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref email password [cb session-only?])], :arglists ([ref email password & [cb session-only?]]), :arglists-meta (nil)}, :method-params [(ref email password [cb session-only?])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 460, :end-line 460, :max-fixed-arity 3, :fn-var true, :arglists ([ref email password & [cb session-only?]])}, export {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 312, :column 7, :end-line 312, :end-column 13, :arglists (quote ([ref-or-ds & [cb]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ref-or-ds [cb])], :arglists ([ref-or-ds & [cb]]), :arglists-meta (nil)}}, :name matchbox.core/export, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ref-or-ds [cb])], :arglists ([ref-or-ds & [cb]]), :arglists-meta (nil)}, :method-params [(ref-or-ds [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 312, :end-line 312, :max-fixed-arity 1, :fn-var true, :arglists ([ref-or-ds & [cb]])}, get-children {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 189, :column 8, :end-line 189, :end-column 20, :private true, :arglists (quote ([snapshot]))}, :private true, :name matchbox.core/get-children, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 20, :method-params ([snapshot]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 189, :end-line 189, :max-fixed-arity 1, :fn-var true, :arglists (quote ([snapshot]))}, child-events {:name matchbox.core/child-events, :file "resources/public/js/out/matchbox/core.cljs", :line 29, :column 1, :end-line 29, :end-column 18, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 29, :column 6, :end-line 29, :end-column 18}}, disconnect! {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 394, :column 7, :end-line 394, :end-column 18, :arglists (quote ([]))}, :name matchbox.core/disconnect!, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 394, :end-line 394, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, set-priority-in! {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 524, :column 7, :end-line 524, :end-column 23, :arglists (quote ([ref korks priority & [cb]])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref korks priority [cb])], :arglists ([ref korks priority & [cb]]), :arglists-meta (nil)}}, :name matchbox.core/set-priority-in!, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref korks priority [cb])], :arglists ([ref korks priority & [cb]]), :arglists-meta (nil)}, :method-params [(ref korks priority [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 524, :end-line 524, :max-fixed-arity 3, :fn-var true, :arglists ([ref korks priority & [cb]])}, conj-in! {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 513, :column 7, :end-line 513, :end-column 15, :arglists (quote ([ref korks val & [cb]])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref korks val [cb])], :arglists ([ref korks val & [cb]]), :arglists-meta (nil)}}, :name matchbox.core/conj-in!, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref korks val [cb])], :arglists ([ref korks val & [cb]]), :arglists-meta (nil)}, :method-params [(ref korks val [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 513, :end-line 513, :max-fixed-arity 3, :fn-var true, :arglists ([ref korks val & [cb]])}, wrap-auth-cb {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 439, :column 8, :end-line 439, :end-column 20, :private true, :arglists (quote ([cb]))}, :private true, :name matchbox.core/wrap-auth-cb, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 20, :method-params ([cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 439, :end-line 439, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cb]))}, hydrate {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 129, :column 7, :end-line 129, :end-column 14, :arglists (quote ([v]))}, :name matchbox.core/hydrate, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 14, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, remove-in! {:name matchbox.core/remove-in!, :file "resources/public/js/out/matchbox/core.cljs", :line 522, :column 1, :end-line 522, :end-column 16, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 522, :column 6, :end-line 522, :end-column 16}}, auth-custom {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 473, :column 7, :end-line 473, :end-column 18, :arglists (quote ([ref secret] [ref secret cb] [ref secret cb session-only?])), :doc "Authenticates a Firebase client using an authentication token or Firebase Secret.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([ref secret] [ref secret cb] [ref secret cb session-only?]), :arglists ([ref secret] [ref secret cb] [ref secret cb session-only?]), :arglists-meta (nil nil nil)}}, :name matchbox.core/auth-custom, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([ref secret] [ref secret cb] [ref secret cb session-only?]), :arglists ([ref secret] [ref secret cb] [ref secret cb session-only?]), :arglists-meta (nil nil nil)}, :method-params ([ref secret] [ref secret cb] [ref secret cb session-only?]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 473, :end-line 473, :max-fixed-arity 4, :fn-var true, :arglists ([ref secret] [ref secret cb] [ref secret cb session-only?]), :doc "Authenticates a Firebase client using an authentication token or Firebase Secret."}, throw-fb-error {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 67, :column 7, :end-line 67, :end-column 21, :arglists (quote ([err & [msg]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(err [msg])], :arglists ([err & [msg]]), :arglists-meta (nil)}}, :name matchbox.core/throw-fb-error, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(err [msg])], :arglists ([err & [msg]]), :arglists-meta (nil)}, :method-params [(err [msg])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists ([err & [msg]])}, priority {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 315, :column 7, :end-line 315, :end-column 15, :arglists (quote ([ref-or-ds & [cb]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ref-or-ds [cb])], :arglists ([ref-or-ds & [cb]]), :arglists-meta (nil)}}, :name matchbox.core/priority, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ref-or-ds [cb])], :arglists ([ref-or-ds & [cb]]), :arglists-meta (nil)}, :method-params [(ref-or-ds [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 315, :end-line 315, :max-fixed-arity 1, :fn-var true, :arglists ([ref-or-ds & [cb]])}, Firebase {:name matchbox.core/Firebase, :file "resources/public/js/out/matchbox/core.cljs", :line 55, :column 8, :end-line 55, :end-column 21, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 55, :column 13, :end-line 55, :end-column 21}}, -listen-children {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 554, :column 8, :end-line 554, :end-column 24, :private true, :arglists (quote ([ref cb]))}, :private true, :name matchbox.core/-listen-children, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 24, :method-params ([ref cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 554, :end-line 554, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ref cb]))}, -export {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 304, :column 8, :end-line 304, :end-column 15, :private true, :arglists (quote ([ds]))}, :private true, :name matchbox.core/-export, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 15, :method-params ([ds]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 304, :end-line 304, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ds]))}, undefined {:name matchbox.core/undefined, :file "resources/public/js/out/matchbox/core.cljs", :line 53, :column 8, :end-line 53, :end-column 22, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 53, :column 13, :end-line 53, :end-column 22}}, end-at {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 356, :column 7, :end-line 356, :end-column 13, :arglists (quote ([ref value & [key]])), :doc "Limit query to end at `value` (inclusive). By default `value` is compared against\n   priorities, but reacts to the `order-by-*` scope. This also affects what types\n   `value can take on.\n\n   `key` is the child key to end at, and is supported only when ordering by priority.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref value [key])], :arglists ([ref value & [key]]), :arglists-meta (nil)}}, :name matchbox.core/end-at, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref value [key])], :arglists ([ref value & [key]]), :arglists-meta (nil)}, :method-params [(ref value [key])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 356, :end-line 356, :max-fixed-arity 2, :fn-var true, :arglists ([ref value & [key]]), :doc "Limit query to end at `value` (inclusive). By default `value` is compared against\n   priorities, but reacts to the `order-by-*` scope. This also affects what types\n   `value can take on.\n\n   `key` is the child key to end at, and is supported only when ordering by priority."}, parents {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 180, :column 7, :end-line 180, :end-column 14, :arglists (quote ([ref])), :doc "Probably don't need this. Or maybe we want more zipper nav (siblings, in-order, etc)"}, :name matchbox.core/parents, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 14, :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref])), :doc "Probably don't need this. Or maybe we want more zipper nav (siblings, in-order, etc)"}, export-in {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 318, :column 7, :end-line 318, :end-column 16, :arglists (quote ([ref-or-ds korks & [cb]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref-or-ds korks [cb])], :arglists ([ref-or-ds korks & [cb]]), :arglists-meta (nil)}}, :name matchbox.core/export-in, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref-or-ds korks [cb])], :arglists ([ref-or-ds korks & [cb]]), :arglists-meta (nil)}, :method-params [(ref-or-ds korks [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 318, :end-line 318, :max-fixed-arity 2, :fn-var true, :arglists ([ref-or-ds korks & [cb]])}, auth-data->map {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 429, :column 8, :end-line 429, :end-column 22, :private true, :arglists (quote ([auth-data]))}, :private true, :name matchbox.core/auth-data->map, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 22, :method-params ([auth-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 429, :end-line 429, :max-fixed-arity 1, :fn-var true, :arglists (quote ([auth-data]))}, deref {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 185, :column 7, :end-line 185, :end-column 12, :arglists (quote ([ref cb]))}, :name matchbox.core/deref, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 12, :method-params ([ref cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ref cb]))}, set-priority! {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 281, :column 7, :end-line 281, :end-column 20, :arglists (quote ([ref priority & [cb]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref priority [cb])], :arglists ([ref priority & [cb]]), :arglists-meta (nil)}}, :name matchbox.core/set-priority!, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref priority [cb])], :arglists ([ref priority & [cb]]), :arglists-meta (nil)}, :method-params [(ref priority [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 281, :end-line 281, :max-fixed-arity 2, :fn-var true, :arglists ([ref priority & [cb]])}, priority-in {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 323, :column 7, :end-line 323, :end-column 18, :arglists (quote ([ref-or-ds korks & [cb]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref-or-ds korks [cb])], :arglists ([ref-or-ds korks & [cb]]), :arglists-meta (nil)}}, :name matchbox.core/priority-in, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref-or-ds korks [cb])], :arglists ([ref-or-ds korks & [cb]]), :arglists-meta (nil)}, :method-params [(ref-or-ds korks [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 323, :end-line 323, :max-fixed-arity 2, :fn-var true, :arglists ([ref-or-ds korks & [cb]])}, cancel {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 413, :column 7, :end-line 413, :end-column 13, :arglists (quote ([ref-disconnect & [cb]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ref-disconnect [cb])], :arglists ([ref-disconnect & [cb]]), :arglists-meta (nil)}}, :name matchbox.core/cancel, :variadic true, :file "resources/public/js/out/matchbox/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ref-disconnect [cb])], :arglists ([ref-disconnect & [cb]]), :arglists-meta (nil)}, :method-params [(ref-disconnect [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 413, :end-line 413, :max-fixed-arity 1, :fn-var true, :arglists ([ref-disconnect & [cb]])}, get-in {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 159, :column 7, :end-line 159, :end-column 13, :arglists (quote ([ref korks])), :doc "Obtain child reference from base by following korks"}, :name matchbox.core/get-in, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 13, :method-params ([ref korks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ref korks])), :doc "Obtain child reference from base by following korks"}, ref? {:protocol-inline nil, :meta {:file "/Users/mmadden/Documents/myRepos/re-frame-firebase-example/resources/public/js/out/matchbox/core.cljs", :line 291, :column 7, :end-line 291, :end-column 11, :arglists (quote ([x]))}, :name matchbox.core/ref?, :variadic false, :file "resources/public/js/out/matchbox/core.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 291, :end-line 291, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:child-moved cb :value :err :child-removed some all-events type :child-changed :keywordize-keys :child-added}, :order [:child-added :child-changed :child-moved :child-removed :value :err :keywordize-keys cb some type all-events]}, :doc nil}